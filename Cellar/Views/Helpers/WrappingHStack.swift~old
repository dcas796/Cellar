//
//  WrappingHStack.swift
//  Cellar
//
//  Created by Dani on 7/6/24.
//

import SwiftUI

struct WrappingHStack: View {
    private let content: Array<AnyView>
    
    init<Content: View>(@ViewBuilder content: @escaping () -> Content) {
        self.content = [AnyView(content())]
        print("Non tuple: \(self.content)")
    }
    
    init<each T: View>(@ViewBuilder content: @escaping () -> TupleView<(repeat each T)>) {
        let mirror = Mirror(reflecting: content().value)
        self.content = mirror.children.compactMap { child in
            guard let view = child as? any View else {
                return nil
            }
            return AnyView(view)
        }
        print("Tuple: \(self.content)")
    }
    
    @State private var totalHeight: CGFloat = .infinity

    var body: some View {
        VStack {
            GeometryReader { geometry in
                self.generateContent(in: geometry)
            }
        }
        .frame(maxHeight: totalHeight)
    }

    private func generateContent(in g: GeometryProxy) -> some View {
        var width = CGFloat.zero
        var height = CGFloat.zero

        return ZStack(alignment: .topLeading) {
            ForEach(Array(zip(self.content.indices, self.content)), id: \.0) { i, view in
                view
                    .padding([.horizontal, .vertical], 4)
                    .alignmentGuide(.leading, computeValue: { d in
                        if (abs(width - d.width) > g.size.width)
                        {
                            width = 0
                            height -= d.height
                        }
                        let result = width
                        if i == self.content.count - 1 {
                            width = 0 //last item
                        } else {
                            width -= d.width
                        }
                        return result
                    })
                    .alignmentGuide(.top, computeValue: {d in
                        let result = height
                        if i == self.content.count - 1 {
                            height = 0 // last item
                        }
                        return result
                    })
            }
        }.background(viewHeightReader($totalHeight))
    }

    private func viewHeightReader(_ binding: Binding<CGFloat>) -> some View {
        return GeometryReader { geometry -> Color in
            let rect = geometry.frame(in: .local)
            DispatchQueue.main.async {
                binding.wrappedValue = rect.size.height
            }
            return .clear
        }
    }
}

#Preview {
    WrappingHStack {
        Text("Hello")
        Button("World") {}
    }
}
